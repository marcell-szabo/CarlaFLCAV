import carla

import random
import time

with open("../OpenStreetMapToOpenDrive/campus.xodr", "r") as f:
# with open("../ZalaZONE-automotive-proving-ground-virtual-simulation-models/OpenDrive/ZalaZONE_SmartCityZone_laser.xodr", "r") as f:
# with open("/opt/carla-simulator/CarlaUE4/Content/Carla/Maps/OpenDrive/Town01.xodr", "r") as f:
  xodr_xml = f.read()
# print(xodr_xml)
client = carla.Client('localhost', 2000)
client.set_timeout(10.0)


vertex_distance = 2.0  # in meters
max_road_length = 500.0 # in meters
wall_height = 0.0      # in meters
extra_width = 0.6      # in meters
world = client.generate_opendrive_world(
xodr_xml, carla.OpendriveGenerationParameters(
    # vertex_distance=vertex_distance,
    #     max_road_length=max_road_length,
    #     wall_height=wall_height,
    #     additional_width=extra_width,
    #     smooth_junctions=True,
    #     enable_mesh_visibility=True
        ))

# Add a camera actor
# camera_bp = world.get_blueprint_library().find('sensor.camera.rgb')
# # Set camera parameters
# camera_bp.set_attribute('image_size_x', '800')
# camera_bp.set_attribute('image_size_y', '600')
# camera_bp.set_attribute('fov', '90')
# camera_transform = carla.Transform(carla.Location(x=0, y=0, z=50), carla.Rotation(pitch=-90))
# camera = world.spawn_actor(camera_bp, camera_transform)
import random
def main():
    actor_list = []

    # In this tutorial script, we are going to add a vehicle to the simulation
    # and let it drive in autopilot. We will also create a camera attached to
    # that vehicle, and save all the images generated by the camera to disk.

    try:
        # First of all, we need to create the client that will send the requests
        # to the simulator. Here we'll assume the simulator is accepting
        # requests in the localhost at port 2000.
        client = carla.Client('localhost', 2000)
        client.set_timeout(10.0)

        # Once we have a client we can retrieve the world that is currently
        # running.
        world = client.get_world()

        # The world contains the list blueprints that we can use for adding new
        # actors into the simulation.
        blueprint_library = world.get_blueprint_library()

        # Now let's filter all the blueprints of type 'vehicle' and choose one
        # at random.
        bp = random.choice(blueprint_library.filter('vehicle.dodge.charger_2020'))

        # Now we need to give an initial transform to the vehicle. We choose a
        # random transform from the list of recommended spawn points of the map.
        transform = world.get_map().get_spawn_points()[0]
        print(world.get_map().get_spawn_points())
        
        # Set the spectator behind the vehicle
        spectator = world.get_spectator()
        spec_transform = carla.Transform(
            location = carla.Location(x = transform.location.x, y = transform.location.y, z = transform.location.z),
            rotation = transform.rotation
        )
        spectator.set_transform(spec_transform)

        # So let's tell the world to spawn the vehicle.
        vehicle = world.spawn_actor(bp, transform)
        
        # It is important to note that the actors we create won't be destroyed
        # unless we call their "destroy" function. If we fail to call "destroy"
        # they will stay in the simulation even after we quit the Python script.
        # For that reason, we are storing all the actors we create so we can
        # destroy them afterwards.
        actor_list.append(vehicle)
        print('created %s' % vehicle.type_id)

        # Let's put the vehicle to drive around.
        vehicle.set_autopilot(True)

        time.sleep(10)

    finally:

        print('destroying actors')
        client.apply_batch([carla.command.DestroyActor(x) for x in actor_list])
        print('done.')


if __name__ == '__main__':

    main()